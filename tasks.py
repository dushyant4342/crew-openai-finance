from crewai import Task
from datetime import datetime
import pytz
from typing import List 

# --- Timezone Helper ---
def get_ist_timestamp_str(format_str="%Y%m%d_%H%M"):
    """Gets the current timestamp in IST as a formatted string."""
    ist = pytz.timezone('Asia/Kolkata')
    now_ist = datetime.now(ist)
    return now_ist.strftime(format_str)

# Example Task Templates (Manager might generate similar tasks dynamically)

def create_research_task(agent, topic, context=None):
    return Task(
        description=f"[{get_ist_timestamp_str()}] Gather comprehensive and up-to-date information on the topic: {topic}. Focus on key findings suitable for a newsletter.",
        expected_output="A detailed report summarizing the key findings, data points, and relevant news about the topic.",
        agent=agent,
        context=context
    )

def create_writing_task(agent, topic, context):
    return Task(
        description=f"[{get_ist_timestamp_str()}] Based on the research provided in the context, write a concise and engaging newsletter article about {topic}. The tone should be informative yet accessible.",
        expected_output="A well-structured newsletter article in detail about the research findings.",
        agent=agent,
        context=context # Requires context from research_task
    )

def create_pdf_task(agent, topic, base_filename, context):
    return Task(
        description=f"[{get_ist_timestamp_str()}] Generate a PDF document containing the newsletter article about {topic} provided in the context. Use the base filename '{base_filename}'. The tool will timestamp it.",
        expected_output=f"The full file path to the successfully created, timestamped PDF document based on '{base_filename}'.",
        agent=agent,
        context=context # Requires context from write_task
    )

def create_audio_task(agent, topic, base_filename, context):
    return Task(
        description=f"[{get_ist_timestamp_str()}] Generate an MP3 audio summary of the newsletter article about {topic} provided in the context. Use the base filename '{base_filename}'. The tool will timestamp it.",
        expected_output=f"The full file path to the successfully created, timestamped MP3 audio file based on '{base_filename}'.",
        agent=agent,
        context=context # Requires context from write_task
    )

# def create_email_task(agent, recipient, subject, body, attachment_tasks, context):
#     return Task(
#         description=f"[{get_ist_timestamp_str()}] Compose and send an email to '{recipient}' with the subject '{subject}'. The email body should be: '{body}'. Attach the files generated by the specified prerequisite tasks (using their full timestamped paths found in context).",
#         expected_output=f"Confirmation that the email was sent successfully to {recipient}.",
#         agent=agent,
#         context=context,
#         dependencies=attachment_tasks # Tasks that produce file paths
#     )


 #--- MODIFIED Email Task Creation ---
def create_email_task(agent, recipient_list: List[str], subject: str, body: str, expected_pdf_path: str = None, expected_audio_path: str = None, context: list = None):
    timestamp = get_ist_timestamp_str()
    attachment_instructions = []
    if expected_pdf_path:
        attachment_instructions.append(f"the PDF file located at '{expected_pdf_path}'")
    if expected_audio_path:
        attachment_instructions.append(f"the Audio file located at '{expected_audio_path}'")
    if attachment_instructions:
        attachment_string = "Attach " + " and ".join(attachment_instructions) + "."
    else:
        attachment_string = "No attachments are required."

    # Ensure recipient list is formatted nicely for the description string
    recipient_display = ", ".join(recipient_list)

    return Task(
        description=(
            f"[{timestamp}] Compose and send an email.\n"
            f"Recipients: {recipient_display}\n"
            f"Subject: '{subject}'\n"
            f"Body: '{body}'\n"
            f"Attachments: {attachment_string} You MUST verify these files exist before attempting to attach them. "
            f"Pass the list of existing file paths you found to the 'attachment_paths' argument of the email sending tool."
        ),
        expected_output=f"Confirmation that the email was sent successfully to {recipient_display}, noting which files were attached.",
        agent=agent,
        context=context
        # Removed dependencies argument
    )

def create_save_local_task(agent, file_producing_task, context):
    return Task(
        description=f"[{get_ist_timestamp_str()}] Confirm and ensure the timestamped file generated by the prerequisite task exists in the local 'outputs' directory.",
        expected_output="Confirmation that the file path exists locally.",
        agent=agent,
        context=context, # Context contains the file path from the dependency
        dependencies=[file_producing_task]
    )

# --- Initial Manager Task ---
def create_manager_task(manager_agent, user_prompt):
    timestamp = get_ist_timestamp_str()
    return Task(
        description=(
            f"[{timestamp}] Analyze the following user request and create a plan to fulfill it using the available specialist agents: '{user_prompt}'. "
            "Identify the topic, required actions (research, write, pdf, audio, email, save locally), and any parameters (e.g., email recipient, desired base filenames like 'report' or 'summary'). "
            "Remember that PDF and audio files will be automatically timestamped by the tools based on the base filename you provide. "
            "Then, delegate the necessary tasks sequentially to the appropriate agents. Ensure the final output matches the user's request. "
            "Provide a final confirmation message summarizing what was done."
        ),
        expected_output=(
            "A final confirmation message stating the successful completion of the requested tasks, including details like full timestamped filenames created or email recipients."
        ),
        agent=manager_agent
    )

